generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"] // Add this line
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String?
  role         Role      @default(CUSTOMER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cartItems    CartItem[]
  wishlist     WishlistItem[]
}
model Brand {
  id        Int       @id @default(autoincrement())
  name_en     String    @unique
  name_ar     String    @unique
  description_en String?
  description_ar String?
  image    String?   // New field for brand image
  imageType    String?   // New field for brand image type
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Category {
  id          Int        @id @default(autoincrement())
  name_en     String    @unique
  name_ar     String    @unique
  description_en String?
  description_ar String?
  image    String?   // New field for category image
  imageType    String?   // New field for category image type
  products    Product[]
  // Self-referencing relationship for subcategories
  parentId      Int?
  parentCategory Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories  Category[]  @relation("CategoryHierarchy")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


// Join table for self-referencing many-to-many
model ProductRelation {
  id         Int     @id @default(autoincrement())
  // The product that owns the relation
  product    Product @relation("ProductToRelated", fields: [productId], references: [id])
  productId  Int
  // The related product
  related    Product @relation("RelatedToProduct", fields: [relatedId], references: [id])
  relatedId  Int
  @@unique([productId, relatedId])
}

model Product {
  id           Int       @id @default(autoincrement())
  name_en     String    @unique
  name_ar     String    @unique
  description_en String?
  description_ar String?
  price        Int
  image    String?   // New field for Product image
  imageType    String?   // New field for Product image type
  categoryId   Int?
  category     Category? @relation(fields: [categoryId], references: [id])
  brandId      Int?
  brand        Brand?    @relation(fields: [brandId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cartItems    CartItem[]
  wishlist     WishlistItem[]
  orderItems   OrderItem[]
  salesCount     Int       @default(0) // for top sellers
  // Self-referencing many-to-many for related products
  relatedProducts ProductRelation[] @relation("ProductToRelated")
  relatedTo       ProductRelation[] @relation("RelatedToProduct")
  hasOffer         Boolean        @default(false) // New field
}

/*model Image {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}*/

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  @@unique([userId, productId], name: "user_product_unique")
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  addedAt   DateTime @default(now())
  @@unique([userId, productId], name: "user_wishlist_unique")
}

model Order {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  phone       String
  totalPrice  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Int       // Snapshot of product price at order time
}

